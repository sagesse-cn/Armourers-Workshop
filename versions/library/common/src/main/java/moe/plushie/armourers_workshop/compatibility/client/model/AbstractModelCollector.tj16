package moe.plushie.armourers_workshop.compatibility.client.model;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.client.model.IModelPartCollector;
import moe.plushie.armourers_workshop.core.utils.Collections;
import net.minecraft.client.model.geom.ModelPart;

import java.util.LinkedHashMap;
import java.util.Map;

@Available("[1.16, 1.18)")
public class AbstractModelCollector {

    private static final Map<Class<?>, Map<String, String>> FIXER = Collections.immutableMap(builder -> {
        builder.put(AbstractSkinnableModel.ILLAGER, Collections.immutableMap(builder2 -> {
            builder2.put("root.head", "parts[0]");
            builder2.put("root.body", "parts[1]");
            builder2.put("root.left_leg", "parts[2]");
            builder2.put("root.right_leg", "parts[3]");
            builder2.put("root.arms", "parts[4]");
            builder2.put("root.right_arm", "parts[5]");
            builder2.put("root.left_arm", "parts[6]");
            builder2.put("root.head.hat", "parts[0].children[0]");
        }));
        builder.put(AbstractSkinnableModel.VILLAGER, Collections.immutableMap(builder2 -> {
            builder2.put("root.head.hat", "parts[0].children[0]");
            builder2.put("root.head.hat.hat_rim", "parts[0].children[0].children[0]");
            builder2.put("root.head", "parts[0]");
            builder2.put("root.head.nose", "parts[0].children[1]");
            builder2.put("root.body", "parts[1]");
            builder2.put("root.right_leg", "parts[2]");
            builder2.put("root.left_leg", "parts[3]");
            builder2.put("root.arms", "parts[4]");
            builder2.put("root.body.jacket", "parts[1].children[0]");
        }));
        builder.put(AbstractSkinnableModel.IRON_GOLEM, Collections.immutableMap(builder2 -> {
            builder2.put("root.head", "parts[0]");
            builder2.put("root.body", "parts[1]");
            builder2.put("root.right_leg", "parts[2]");
            builder2.put("root.left_leg", "parts[3]");
            builder2.put("root.right_arm", "parts[4]");
            builder2.put("root.left_arm", "parts[5]");
        }));
        builder.put(AbstractSkinnableModel.CREEPER, Collections.immutableMap(builder2 -> {
            builder2.put("root.head", "parts[0]");
        }));
        builder.put(AbstractSkinnableModel.HORSE, Collections.immutableMap(builder2 -> {
            builder2.put("bodyParts[0].tail", "bodyParts[0].children[0]");
        }));
    });

    public static void collect(String root, Iterable<ModelPart> parts, Map<String, ModelPart> collector) {
        int i = 0;
        for (var part : parts) {
            var name = String.format("%s[%d]", root, i++);
            collector.put(name, part);
            if (!(part instanceof IModelPartCollector provider)) {
                continue;
            }
            var child = new LinkedHashMap<String, ModelPart>();
            provider.aw2$collect(child);
            child.forEach((key, value) -> collector.put(name + "." + key, value));
        }
    }

    public static Map<String, String> apply(Class<?> clazz, Map<String, String> mapper) {
        // fast fix the name.
        var fixer = FIXER.get(clazz);
        if (fixer == null) {
            return mapper;
        }
        var fixedMapper = new LinkedHashMap<String, String>();
        mapper.forEach((key, value) -> fixedMapper.put(key, fixer.getOrDefault(value, value)));
        return fixedMapper;
    }
}
