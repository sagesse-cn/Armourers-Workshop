package moe.plushie.armourers_workshop.compatibility.mixin.patch.attachment;

import moe.plushie.armourers_workshop.api.annotation.Available;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.animal.Chicken;
import net.minecraft.world.entity.animal.horse.AbstractHorse;
import net.minecraft.world.entity.animal.horse.Llama;
import net.minecraft.world.entity.vehicle.Boat;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Available("[1.16, 1.20)")
@Mixin({Entity.class, AbstractHorse.class, Boat.class, Chicken.class, Llama.class})
public abstract class EntityRidingLayerMixin {

    @Inject(method = "positionRider(Lnet/minecraft/world/entity/Entity;)V", at = @At(value = "HEAD"), cancellable = true)
    private void aw2$positionRider(Entity passenger, CallbackInfo ci) {
        var entity = Entity.class.cast(this);
        var index = entity.getPassengers().indexOf(passenger);
        if (index == -1) {
            return; // not a passenger
        }
        var level = entity.getLevel();
        if (level == null || !level.isClientSide()) {
            return; // only work client side
        }
        var offset = entity.getCustomRidding(index);
        if (offset == null) {
            return; // can't found custom riding position.
        }
        double x = entity.getX() + offset.x();
        double y = entity.getY() + offset.y() + passenger.getMyRidingOffset();
        double z = entity.getZ() + offset.z();
        passenger.setPos(x, y, z);
        ci.cancel();
    }
}
