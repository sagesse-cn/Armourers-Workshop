package moe.plushie.armourers_workshop.compatibility.forge.mixin;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.common.IBlockEntityCapability;
import moe.plushie.armourers_workshop.compatibility.core.AbstractBlockEntity;
import moe.plushie.armourers_workshop.compatibility.forge.AbstractForgeCapabilityManagerImpl;
import net.minecraft.core.Direction;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.util.LazyOptional;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

@Available("[1.18, 1.21)")
@Mixin(AbstractBlockEntity.class)
public abstract class ForgeBlockEntityCapabilityMixin extends BlockEntity {

    private ForgeBlockEntityCapabilityMixin() {
        super(null, null, null);
    }

    @Override
    public <T> LazyOptional<T> getCapability(Capability<T> capability, Direction arg) {
        var blockEntity1 = AbstractBlockEntity.class.cast(this);
        var capability1 = AbstractForgeCapabilityManagerImpl.wrap(capability);
        var result = blockEntity1.getCapability(capability1, arg);
        if (result != null) {
            return LazyOptional.of(() -> result);
        }
        return LazyOptional.empty();
    }

    // replace the implementation with calling super.getCapability
    @Inject(method = "getCapability(Lmoe/plushie/armourers_workshop/api/common/IBlockEntityCapability;Lnet/minecraft/core/Direction;)Ljava/lang/Object;", at = @At("HEAD"), cancellable = true, remap = false)
    private <T> void aw2$super$getCapability(IBlockEntityCapability<T> capability, Direction dir, CallbackInfoReturnable<T> cir) {
        var capability1 = AbstractForgeCapabilityManagerImpl.unwrap(capability);
        var result = super.getCapability(capability1, dir);
        cir.setReturnValue(result.resolve().orElse(null));
    }
}
